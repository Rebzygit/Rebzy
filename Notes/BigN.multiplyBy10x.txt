Позднякову понравится, Даше поможет! Что именно? А вот что:
Записывайте сюда ваш путь, как вы что-то осознали и улучшили,
Может какие-то важные замечания или типо того. Например:

Фигурная скобка, чтобы можно было открывать/закрывать пункты(в Notepad++ например так можно, может и у вас в редакторе можно)

1{ в методе умножения числа на 10^x было замечено, что проще не использовать класс BigN и его метод умножения(хотя делалось тупо в лоб), 
лучше и гораздо быстрее оказалось работать со строками, приписывая нули к исходному числу. Для сравнения вот 2 варианта реализации метода multiplyBy10x:
public BigN multiplyBy10x(BigN x)
	{
		//Вариант 1, делаем в лоб: умножаем на 10 столько раз, сколько нас просят
		BigN result = new BigN();
		BigN i = new BigN("1");
		BigN ten = new BigN("10");
		if(x.isZero()) return i;
		result = ten;
		while(i.isLessThan(x))
		{
			result = result.multiply(ten);
			i = i.increment();
		}
		result = this.multiply(result);
		return result;
		
		//Вариант 2, где мы используем строки, дописывая нужное количество нулей
		BigN i = new BigN("1");
		if(x.isZero()) return i;
		String buff = this.toString();
		String repeated = "0".repeat(Integer.valueOf(x.toString()));
		buff += repeated;
		BigN result = new BigN(buff);
		return result;
    }
Ручками и секундомером замерим скорость работы обоих вариантов на примере 5708*10^150540
Результат первого варианта: ~48 секунд
Результат второго: подсчет был самым быстрым на Диком Западе, что замеряющий успел только нажать на старт секундомера, как ответ был уже на экране
Очевидно, что в данном случае перевод большого числа в строку наиболее удобен и быстр
P.S. Кому нечего делать, посмотрите на нолики: посчитайте 2147483647*10^214748364(java -Xmx8192M Test поможет, если будут проблемы, только ради бога используйте второй вариант(он уже в BigN.java, а то будете ждать неделю)
}